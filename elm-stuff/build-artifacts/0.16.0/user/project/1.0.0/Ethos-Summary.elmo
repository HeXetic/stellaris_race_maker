Elm.Ethos = Elm.Ethos || {};
Elm.Ethos.Summary = Elm.Ethos.Summary || {};
Elm.Ethos.Summary.make = function (_elm) {
   "use strict";
   _elm.Ethos = _elm.Ethos || {};
   _elm.Ethos.Summary = _elm.Ethos.Summary || {};
   if (_elm.Ethos.Summary.values) return _elm.Ethos.Summary.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effect$Summary$View = Elm.Effect.Summary.View.make(_elm),
   $Ethos = Elm.Ethos.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var showOne = function (_p0) {
      var _p1 = _p0;
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("ethos")]),
      _U.list([A2($Html.h4,
              _U.list([]),
              _U.list([$Html.text(_p1.name)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.small,_U.list([]),_U.list([$Html.text($Ethos.dichotomyToString(_p1.dichotomy))]))]))
              ,A2($Html.p,_U.list([]),_U.list([$Html.text(_p1.description)]))
              ,A3($Effect$Summary$View.showWithClassAndTitle,"effects","Effects",_p1.effects)]));
   };
   var show = function (ethos) {    return A2($Html.div,_U.list([$Html$Attributes.$class("selected-ethos")]),A2($List.map,showOne,ethos));};
   return _elm.Ethos.Summary.values = {_op: _op,show: show};
};