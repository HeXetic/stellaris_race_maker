Elm.Trait = Elm.Trait || {};
Elm.Trait.SelectedList = Elm.Trait.SelectedList || {};
Elm.Trait.SelectedList.make = function (_elm) {
   "use strict";
   _elm.Trait = _elm.Trait || {};
   _elm.Trait.SelectedList = _elm.Trait.SelectedList || {};
   if (_elm.Trait.SelectedList.values)
   return _elm.Trait.SelectedList.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effect$Summary$View = Elm.Effect.Summary.View.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Trait = Elm.Trait.make(_elm),
   $Trait$Data = Elm.Trait.Data.make(_elm);
   var _op = {};
   var stringListWithTitle = F2(function (title,list) {
      return $List.isEmpty(list) ? $Html.text("") : A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h5,_U.list([]),_U.list([$Html.text(title)]))
              ,A2($Html.ul,
              _U.list([]),
              A2($List.map,
              function (name) {
                 return A2($Html.li,_U.list([]),_U.list([$Html.text(name)]));
              },
              list))]));
   });
   var showOne = F3(function (hoveredTrait,selectedTraits,trait) {
      var ofSameFamily = A2($Trait.ofSameFamily,
      $Trait$Data.all,
      trait);
      var points = _U.eq($Basics.abs(trait.points),
      1) ? A2($Basics._op["++"],
      $Basics.toString(trait.points),
      " point") : A2($Basics._op["++"],
      $Basics.toString(trait.points),
      " points");
      return A2($Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2"
                                                   ,_0: "trait"
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "notselected"
                                                   ,_1: $Basics.not(A2($Trait.isSelected,selectedTraits,trait))}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: "hovered"
                                                   ,_1: A2($Trait.isHovered,hoveredTrait,trait)}]))]),
      _U.list([A2($Html.h4,
              _U.list([]),
              _U.list([$Html.text(trait.name)
                      ,A2($Html.br,_U.list([]),_U.list([]))
                      ,A2($Html.small,
                      _U.list([]),
                      _U.list([$Html.text(_U.cmp(trait.points,
                      0) > 0 ? "Positive trait" : "Negative trait")]))]))
              ,A2($Html.p,_U.list([]),_U.list([$Html.text(points)]))
              ,A2($Html.p,
              _U.list([]),
              _U.list([$Html.text(trait.description)]))
              ,A2(stringListWithTitle,"Same family :",ofSameFamily)
              ,A2($Html.h5,_U.list([]),_U.list([$Html.text("Effects :")]))
              ,$Effect$Summary$View.show(trait.effects)]));
   });
   var show = F2(function (hoveredTrait,selectedTraits) {
      var traits = function () {
         var _p0 = hoveredTrait;
         if (_p0.ctor === "Nothing") {
               return selectedTraits;
            } else {
               var _p1 = _p0._0;
               return A2($List.append,
               _U.list([_p1]),
               A2($List.filter,
               function (x) {
                  return !_U.eq(x,_p1);
               },
               selectedTraits));
            }
      }();
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("selected-traits")]),
      A2($List.map,A2(showOne,hoveredTrait,selectedTraits),traits));
   });
   return _elm.Trait.SelectedList.values = {_op: _op,show: show};
};